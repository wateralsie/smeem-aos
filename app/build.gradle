plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-parcelize'
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        release {
            storeFile file(keystoreProperties['store_file'])
            storePassword keystoreProperties['store_password']
            keyPassword keystoreProperties['key_password']
            keyAlias keystoreProperties['key_alias']
        }
    }
    namespace 'com.sopt.smeem'
    compileSdk 34

    defaultConfig {
        applicationId "com.sopt.smeem"
        minSdk 28
        targetSdk 34
        versionCode 20240403
        /*
        x.y.z
        x: ui, 주요기능의 큰 변화
        y: 기능 추가, 가시적인 변화
        z: 오류 수정, 긴급 업데이트 사항
        */
        versionName "1.2.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "KAKAO_API_KEY", properties['kakao_api_key']
        buildConfigField "String", "PROD_API_SERVER_URL", properties['prod_api_server_url']
        buildConfigField "String", "DEV_API_SERVER_URL", properties['dev_api_server_url']
        buildConfigField "String", "DEEPL_API_KEY", properties['deepl_api_key']
        buildConfigField "String", "DEV_AMPLITUDE_API_KEY", properties['dev_amplitude_api_key']
        buildConfigField "String", "PROD_AMPLITUDE_API_KEY", properties['prod_amplitude_api_key']
        buildConfigField "String", "APPFLYER_DEV_KEY", properties['appsflyer_dev_key']
        manifestPlaceholders = [KAKAO_API_KEY: properties['kakao_api_key_manifest']]
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".dev"

            minifyEnabled false
            buildConfigField("boolean", "IS_DEBUG", "true")

            manifestPlaceholders = [
                    appName: "@string/dev_app_name",
                    appIcon: "@mipmap/ic_smeem_dev"
            ]
        }
        release {
            minifyEnabled true
            buildConfigField("boolean", "IS_DEBUG", "false")
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            manifestPlaceholders = [
                    appName: "@string/app_name",
                    appIcon: "@mipmap/ic_smeem"
            ]
        }
    }

    flavorDimensions += "server"

    productFlavors {
        create("dev") {
            version "server"
            versionNameSuffix ".dev"
        }
        create("prod") {
            version "server"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.10"
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}


dependencies {
    // androidx
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    // coroutines
    implementation(libs.kotlinx.coroutines.core)
    implementation(libs.jetbrains.kotlinx.coroutines.android)
    // retrofit2
    implementation(libs.retrofit)
    implementation(libs.converter.gson)
    implementation(libs.retrofit2.kotlinx.serialization.converter)
    // OkHttp
    implementation(libs.okhttp)
    implementation(libs.logging.interceptor)
    // coil
    implementation(libs.coil)
    // activity-ktx
    implementation(libs.androidx.activity.ktx)
    // fragment-ktx
    implementation(libs.androidx.fragment.ktx)
    // ViewModel
    implementation(libs.androidx.lifecycle.viewmodel.ktx)
    // viewModel savedstate
    implementation(libs.androidx.lifecycle.viewmodel.savedstate)
    // LiveData
    implementation(libs.androidx.lifecycle.livedata.ktx)
    // gson
    implementation(libs.gson)
    // secret
    implementation(libs.secrets.gradle.plugin)
    // SharedPreference
    implementation(libs.androidx.security.crypto.ktx)
    // DataStore
    implementation(libs.androidx.datastore.preferences)
    // lifecycle
    implementation(libs.androidx.lifecycle.runtime.ktx)

    // ui //
    // Material
    implementation(libs.material)
    // ConstraintLayout
    implementation(libs.androidx.constraintlayout)
    // CoordinateLayout
    implementation(libs.androidx.coordinatorlayout)
    // RecyclerView
    implementation(libs.androidx.recyclerview)
    // navigation
    implementation(libs.androidx.navigation.ui.ktx)
    implementation(libs.androidx.navigation.fragment.ktx)
    // lottie
    implementation(libs.lottie)
    // splash
    implementation(libs.androidx.core.splashscreen)
    // balloon tooltip
    implementation(libs.balloon)

    // external //
    // firebase
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.config.ktx)
    implementation(libs.firebase.analytics.ktx)
    implementation(libs.firebase.messaging.ktx)
    implementation(libs.firebase.crashlytics.ktx)
    // test
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    // kakao
    implementation(libs.v2.user)
    // Hilt
    implementation(libs.hilt.android)
    kapt(libs.hilt.compiler)
    // Timber
    implementation(libs.timber)
    // Glide
    implementation(libs.glide)
    // Amplitude
    implementation(libs.analytics.android)
    // Browser
    implementation(libs.androidx.browser)

    // Compose
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.compose.ui.graphics)
    implementation(libs.androidx.compose.ui.tooling.preview)
    implementation(libs.androidx.compose.ui.tooling)
    implementation(libs.androidx.compose.ui)
    implementation(libs.androidx.material.icons.extended)

    // Compose Material Design 3
    implementation(libs.androidx.compose.material3)

    // lifecycle
    implementation(libs.androidx.lifecycle.runtime.compose)

    // Compose navigation
    implementation(libs.androidx.navigation.compose)

    // hilt navigation compose
    implementation(libs.androidx.hilt.navigation.compose)

    // coil compose
    implementation(libs.coil.compose)

    // Optional - Integration with activities
    implementation(libs.androidx.activity.compose)
    // Optional - Integration with ViewModels
    implementation(libs.androidx.lifecycle.viewmodel.compose)

    // Orbit
    implementation(libs.bundles.orbit)

    // Appsflyer
    implementation(libs.appsflyer.android.sdk)

    // Compose test
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.compose.ui.test.junit4)
    debugImplementation(libs.androidx.compose.ui.test.manifest)

}